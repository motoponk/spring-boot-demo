buildscript {
	ext {
		springBootVersion = '2.0.0.M5'
	}
	repositories {
		mavenCentral()
		maven { url "https://repo.spring.io/snapshot" }
		maven { url "https://repo.spring.io/milestone" }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: "jacoco"

jar {
	baseName = 'movie-finder'
}

version = '1.0.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
}

sourceSets {
	test {
		java.srcDirs = ['src/test/unit/java']
		resources.srcDirs = ['src/test/unit/resources']
	}
	integrationTest {
		java.srcDirs = ['src/test/integration/java']
		resources.srcDirs = ['src/test/integration/resources']
		compileClasspath += main.output + test.output
		runtimeClasspath += main.output + test.output
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
	compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "org.springframework.boot:spring-boot-starter-web"
	compile "org.springframework.boot:spring-boot-starter-thymeleaf"
	compile "org.springframework.boot:spring-boot-starter-data-jpa"
	compile "mysql:mysql-connector-java"
	compile "com.h2database:h2"
	compile "org.projectlombok:lombok"
	compile "org.springframework.boot:spring-boot-devtools"
	testCompile "org.springframework.boot:spring-boot-starter-test"
	compile "org.webjars:bootstrap:3.3.7"
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.3
			}
		}
	}
}

// to run coverage verification during the build (and fail when appropriate)
check.dependsOn jacocoTestCoverageVerification

jacocoTestReport {
	reports {
		html {
			enabled true
		}
	}
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [ '**/config/*', '**/entity/*', '**/*Application*' ])
		})
	}
}

test {
	jacoco {
		append = false
		destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
		classDumpDir = file("$buildDir/jacoco/classpathdumps")
	}
}

task integrationTest(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
}

integrationTest {
	systemProperties = System.properties
}
